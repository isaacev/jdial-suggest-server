 int External_Mathpow(int p0, int p1){
return ??;
}
bit const0change = ??;
 int Const0(){
if(const0change == 1){
return ??;}else{
return 1;}
}


int[8] lineArray;
int[8] aArray = {0,0,0,0,0,0,0,0};
int[8] bArray = {0,0,0,0,0,0,0,0};
int[8] cArray = {0,0,0,0,0,0,0,0};


int cfinal = 0;
int finalcount = 0;

 int SimpleJava(){
int count = -1;
int linehit = 0;
(count)++;
lineArray[count] = 6;

int a = 2;

(count)++;
lineArray[count] = 7;
aArray[count] = a;

int b = a + (Const0());

(count)++;
lineArray[count] = 8;
aArray[count] = a;
bArray[count] = b;

int c = a + b;

(count)++;
lineArray[count] = 9;
(linehit)++;
if(linehit == 1){
cfinal = c;
finalcount = count;
return 0;
}

aArray[count] = a;
bArray[count] = b;
cArray[count] = c;

return c;



}

harness void HammingTest(){
int[4] oringianlaArray = {0,2,2,2};
int[4] oringianlbArray = {0,0,3,3};
int[4] oringianlcArray = {0,0,0,5};
int correctFinal_c = 6;
SimpleJava();
int HammingDistance = 0;
for(int i = 0; i < 4; (i)++){
HammingDistance += (aArray[i]) != (oringianlaArray[i]);
HammingDistance += (bArray[i]) != (oringianlbArray[i]);
HammingDistance += (cArray[i]) != (oringianlcArray[i]);
}

assert (cfinal == correctFinal_c);
assert (const0change == 1);
minimize(HammingDistance);
}
